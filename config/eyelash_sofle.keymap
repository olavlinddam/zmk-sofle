#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 35    // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include "keys_da.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    modlayer: modlayer {
        compatible = "zmk,behavior-mod-morph";
        label = "MODLAYER";
        bindings = <&mo 1>, <&mo 2>;

        #binding-cells = <0>;
        mods = <(MOD_RSFT)>;
    };

    h_left: h_left {
        compatible = "zmk,behavior-mod-morph";
        label = "H_LEFT";
        bindings = <&kp DA_H>, <&kp LEFT>;

        #binding-cells = <0>;
        mods = <(MOD_LCTL)>;
    };

    j_down: j_down {
        compatible = "zmk,behavior-mod-morph";
        label = "J_DOWN";
        bindings = <&kp DA_J>, <&kp DOWN>;

        #binding-cells = <0>;
        mods = <(MOD_LCTL)>;
    };

    k_up: k_up {
        compatible = "zmk,behavior-mod-morph";
        label = "K_UP";
        bindings = <&kp DA_K>, <&kp UP>;

        #binding-cells = <0>;
        mods = <(MOD_LCTL)>;
    };

    l_right: l_right {
        compatible = "zmk,behavior-mod-morph";
        label = "L_RIGHT";
        bindings = <&kp DA_L>, <&kp RIGHT>;

        #binding-cells = <0>;
        mods = <(MOD_LCTL)>;
    };

    delete: delete {
        compatible = "zmk,behavior-mod-morph";
        label = "DELETE";
        bindings = <&kp BACKSPACE>, <&kp DELETE>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT)>;
    };

    tapHoldPrefHold: tapHoldPrefHold {
        compatible = "zmk,behavior-hold-tap";
        label = "TAPHOLDPREFHOLD";
        bindings = <&mo>, <&to>;

        #binding-cells = <2>;
        tapping-term-ms = <124>;
        hold-while-undecided;
        hold-while-undecided-linger;
        require-prior-idle-ms = <0>;
        quick-tap-ms = <200>;
    };

    tapHoldPrefTap: tapHoldPrefTap {
        compatible = "zmk,behavior-hold-tap";
        label = "TAPHOLDPREFTAP";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <125>;
        flavor = "tap-preferred";
        quick-tap-ms = <200>;
    };

    new_behavior: new_behavior {
        compatible = "zmk,behavior-hold-tap";
        label = "NEW_BEHAVIOR";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <125>;
        flavor = "tap-preferred";
        quick-tap-ms = <200>;
        require-prior-idle-ms = <125>;
    };

    apostrophe_backtick: apostrophe_backtick {
        compatible = "zmk,behavior-mod-morph";
        label = "APOST_BACKT";
        bindings = <&kp DA_GRAVE>, <&kp DA_APOS>;

        #binding-cells = <0>;
        mods = <(MOD_LSFT)>;
    };

    behaviors {
    };

    macros {
        oe: oe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(A) &kp L &kp T &kp PLUS &kp N0 &kp N2 &kp N1 &kp N6>;
            label = "OE";
        };

        aa: aa {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(A) &kp L &kp T &kp PLUS &kp N1 &kp N4 &kp N3>;
            label = "AA";
        };
    };

    combos {
        compatible = "zmk,combos";

        navLayer {
            bindings = <&mo 2>;
            key-positions = <61 57>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
            bindings = <
&kp CAPS    &kp DA_N1  &kp DA_N2     &kp DA_N3       &kp DA_N4  &kp DA_N5    &mmv MOVE_UP     &kp DA_N6  &kp DA_N7      &kp DA_N8                           &kp DA_N9  &kp DA_N0  &none
&kp TAB     &kp Q      &kp W         &kp E           &kp R      &kp T        &mmv MOVE_DOWN   &kp Y      &kp U          &kp I                               &kp O      &kp P      &kp DA_A_RING
&kp ESC     &kp DA_A   &kp S         &kp DA_D        &kp F      &kp G        &mmv MOVE_LEFT   &kp DA_H   &kp J          &kp DA_K                            &kp DA_L   &kp DA_AE  &kp DA_O_SLASH
&kp LCTRL   &kp Z      &kp X         &kp C           &kp V      &kp B        &mmv MOVE_RIGHT  &kp N      &kp M          &kp COMMA                           &kp DOT    &to 2      &kp RCTRL
&kp C_MUTE  &kp LGUI   &kp LEFT_ALT  &kp LEFT_SHIFT  &kp SPACE  &modlayer    &mkp LCLK        &kp ENTER  &kp BACKSPACE  &tapHoldPrefTap RIGHT_SHIFT DELETE  &kp LALT   &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        symbol {
            bindings = <
&kp F1      &kp F2           &kp F3             &kp F4        &kp F5         &kp F6              &mmv MOVE_UP     &kp F7                &kp F8                   &kp F9                              &kp F10           &kp F11               &kp F12
&kp TAB     &kp DA_ONE_HALF  &kp DA_AT_SIGN     &kp DA_POUND  &kp DA_DOLLAR  &kp DA_AMPERSAND    &mmv MOVE_DOWN   &kp DA_QUESTION       &kp DA_LEFT_BRACKET      &kp DA_RIGHT_BRACKET                &kp DA_LESS_THAN  &kp DA_GREATER_THAN   &kp DA_PIPE
&kp ESC     &kp DA_EXCL      &kp DA_MINUS       &kp DA_PLUS   &kp DA_EQUAL   &kp DA_FSLH         &mmv MOVE_LEFT   &kp DA_DOUBLE_QUOTES  &kp DA_LEFT_PARENTHESIS  &kp DA_RIGHT_PARENTHESIS            &kp DA_COLON      &apostrophe_backtick  &kp DA_PERCENT
&kp LCTRL   &kp DA_TILDE     &kp DA_UNDERSCORE  &kp DA_CARET  &kp DA_STAR    &kp DA_BACKSLASH    &mmv MOVE_RIGHT  &kp DA_SINGLE_QUOTE   &kp DA_LEFT_BRACE        &kp DA_RIGHT_BRACE                  &kp DA_SEMICOLON  &to 0                 &kp LCTRL
&kp C_MUTE  &kp LCMD         &kp LEFT_ALT       &kp LSHIFT    &kp SPACE      &none               &mkp LCLK        &kp ENTER             &kp BACKSPACE            &tapHoldPrefTap RIGHT_SHIFT DELETE  &kp LEFT_ALT      &kp LWIN
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        nav-num {
            bindings = <
&kp F1     &kp F2           &kp F3     &kp F4      &kp F5                          &kp F6          &mmv MOVE_UP     &kp F7          &kp F8                              &kp F9                         &kp F10       &kp F11        &kp F12
&kp TAB    &kp DA_SLASH     &kp DA_N7  &kp DA_N8   &kp DA_N9                       &kp DA_PLUS     &mmv MOVE_DOWN   &none           &none                               &none                          &none         &none          &none
&kp ESC    &kp DA_ASTERISK  &kp DA_N4  &kp DA_N5   &kp DA_N6                       &kp DA_MINUS    &mmv MOVE_LEFT   &kp LEFT_ARROW  &kp DOWN_ARROW                      &kp UP                         &kp RIGHT     &none          &none
&kp LCTRL  &kp DA_DOT       &kp DA_N1  &kp DA_N2   &kp DA_N3                       &kp DA_N0       &mmv MOVE_RIGHT  &kp HOME        &kp PAGE_DOWN                       &kp PAGE_UP                    &kp END       &to 0          &kp LEFT_CONTROL
&trans     &kp CAPSLOCK     &kp LWIN   &kp LSHIFT  &tapHoldPrefTap LEFT_ALT SPACE  &mo 1           &mkp LCLK        &kp ENTER       &tapHoldPrefTap LEFT_ALT BACKSPACE  &tapHoldPrefTap RSHIFT DELETE  &kp LEFT_WIN  &kp RIGHT_ALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
